ConstantBuffer uvHitPoint
{
	float2 m_uvHitPoint;
};

ConstantBuffer viewport
{
	float2 m_viewport;
};

ConstantBuffer textureScale
{
	float3 m_textureScale;
};

ConstantBuffer radius
{
	float m_radius;
};

ConstantBuffer hardness
{
	float m_hardness;
};

ConstantBuffer strength
{
	float m_strength;
};

ConstantBuffer colour
{
	float4 m_colour;
};

struct VS_OUTPUT
{
	float4 Position		: S_POSITION;
	float3 WorldPos		: COLOR0;
	float2 UV			: TEXCOORD0;
};

float4 main(VS_OUTPUT In) : S_TARGET_OUTPUT
{
	float4 albedo = float4(0,0,0,0);

	float avgScale = (m_textureScale.x + m_textureScale.y + m_textureScale.z) / 3;

	float m = distance(In.Position / m_viewport, m_uvHitPoint);
    float f = 1 - smoothstep(m_radius/avgScale * m_hardness, m_radius/avgScale, m);  

    float edge = f * m_strength;

    albedo.rgb = lerp(albedo.rgb, m_colour.rgb, edge);
	if (albedo.rgb == float3(0,0,0)){
		discard;
	}
    albedo.a = 1;

	//albedo.rgb = float3(1,0,1);

	return albedo;
}