ConstantBuffer cameraMatrix
{
	column_major matrix projMatrix;
	column_major matrix viewMatrix;
}

ConstantBuffer viewProjMatrix{
	column_major matrix viewProjMatrix;
};

ConstantBuffer invProjMatrix{
	float4x4 invProjMatrix;
};

ConstantBuffer modelMatrix{
	float4x4 modelMatrix;
}

ConstantBuffer invModelMatrix{
	float4x4 invModelMatrix;
}

ConstantBuffer hasVertexColours
{
	int m_hasVertexColours;
};

ConstantBuffer objectColour
{
	float4 m_objectColour;
};

struct VS_INPUT
{
	float3 Position		: POSITION0;
	float2 UV			: TEXCOORD0;
	float3 Normal		: TEXCOORD1;
	float3 Tangent		: TEXCOORD2;
	float4 Color		: COLOR0;
};

struct VS_OUTPUT
{
	float4 Position		: S_POSITION;
	float2 UV			: TEXCOORD0; 
	float3 Normal		: NORMAL;
	float3 WorldPos		: TANGENT;
	float4 Color		: COLOR0;
};

VS_OUTPUT main(VS_INPUT Input)
{
	VS_OUTPUT Output; 

	Output.Position = mul(mul(viewProjMatrix,modelMatrix), float4(Input.Position.xyz, 1));
	float3x3 normalMatrix = transpose(float3x3(invModelMatrix));

	Output.Normal = normalize(mul(normalMatrix, normalize(Input.Normal)));
	Output.WorldPos = mul(modelMatrix, float4(Input.Position,1)).xyz;
	Output.UV = Input.UV;
	Output.Color = m_objectColour;

	if (m_hasVertexColours == 1){
		Output.Color = m_objectColour * Input.Color;
	}

	return Output;
}
